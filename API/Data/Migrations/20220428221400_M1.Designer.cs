// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220428221400_M1")]
    partial class M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.4");

            modelBuilder.Entity("API.Models.Chat", b =>
                {
                    b.Property<string>("ChatId")
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ChatId");

                    b.ToTable("Chats");

                    b.HasData(
                        new
                        {
                            ChatId = "alice_bob_id_1",
                            type = "private"
                        },
                        new
                        {
                            ChatId = "alice_cindy_id_1",
                            type = "private"
                        });
                });

            modelBuilder.Entity("API.Models.Chat_AppUser", b =>
                {
                    b.Property<string>("Chat_AppUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Chat_AppUserId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChatId");

                    b.ToTable("Chat_AppUsers");

                    b.HasData(
                        new
                        {
                            Chat_AppUserId = "Chat_AppUserId_1",
                            AppUserId = "bob_id",
                            ChatId = "alice_bob_id_1"
                        },
                        new
                        {
                            Chat_AppUserId = "Chat_AppUserId_2",
                            AppUserId = "alice_id",
                            ChatId = "alice_bob_id_1"
                        },
                        new
                        {
                            Chat_AppUserId = "Chat_AppUserId_3",
                            AppUserId = "cindy_id",
                            ChatId = "alice_cindy_id_1"
                        },
                        new
                        {
                            Chat_AppUserId = "Chat_AppUserId_4",
                            AppUserId = "alice_id",
                            ChatId = "alice_cindy_id_1"
                        });
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.Property<string>("MessageId")
                        .HasColumnType("TEXT");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("messageSent")
                        .HasColumnType("TEXT");

                    b.HasKey("MessageId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");

                    b.HasData(
                        new
                        {
                            MessageId = "Message_1",
                            AppUserId = "alice_id",
                            ChatId = "alice_bob_id_1",
                            content = "Hi Bob, how are you?",
                            messageSent = new DateTime(2022, 4, 28, 22, 13, 59, 844, DateTimeKind.Utc).AddTicks(2450)
                        },
                        new
                        {
                            MessageId = "Message_2",
                            AppUserId = "bob_id",
                            ChatId = "alice_bob_id_1",
                            content = "Hi Alice, I am fine, thanks",
                            messageSent = new DateTime(2022, 4, 28, 22, 13, 59, 844, DateTimeKind.Utc).AddTicks(2460)
                        },
                        new
                        {
                            MessageId = "Message_3",
                            AppUserId = "alice_id",
                            ChatId = "alice_cindy_id_1",
                            content = "hi cindy this is alice",
                            messageSent = new DateTime(2022, 4, 28, 22, 13, 59, 844, DateTimeKind.Utc).AddTicks(2460)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<int>("Age")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasDiscriminator().HasValue("AppUser");

                    b.HasData(
                        new
                        {
                            Id = "bob_id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "373592ec-ab9e-4cf4-9caf-40b6d7bd0f71",
                            Email = "bob@bob.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEMlwxrDhEgib5OYIbi9QqO+w77lGH0gvZfpejxbcfYaMrzScQBvgoHXargSJooscGg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42d1732c-2938-475b-9ce9-cbd91580322f",
                            TwoFactorEnabled = false,
                            UserName = "bob",
                            Age = 25,
                            City = "Vancouver",
                            Gender = "Male"
                        },
                        new
                        {
                            Id = "alice_id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "54f8b86c-43c2-433d-a9ab-cd02183d3c9b",
                            Email = "alice@alice.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEPeL0gpu2nyOMfbBaQTnpO6bIxafJo8unDQaRxqeTXRhFBTijYcVe+9JtxG8kjJC8g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8099d0e0-3ba3-46a8-b2b4-335080559809",
                            TwoFactorEnabled = false,
                            UserName = "alice",
                            Age = 45,
                            City = "Richmond",
                            Gender = "Female"
                        },
                        new
                        {
                            Id = "cindy_id",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0b1b6619-f50e-4465-a8c6-1247c92925d0",
                            Email = "cindy@cindy.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEFZ+aRb+yRfjesgFDkdONPw/sGg9WElf9auCqA3wBRbV8/ic2POeBSbMoqncv0IWmg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "be87c142-097b-4eab-a1be-2c7e3891f5cd",
                            TwoFactorEnabled = false,
                            UserName = "cindy",
                            Age = 40,
                            City = "Burnaby",
                            Gender = "Female"
                        });
                });

            modelBuilder.Entity("API.Models.Chat_AppUser", b =>
                {
                    b.HasOne("API.Models.AppUser", "appUser")
                        .WithMany("chat_AppUsers")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Chat", "chat")
                        .WithMany("chat_AppUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");

                    b.Navigation("chat");
                });

            modelBuilder.Entity("API.Models.Message", b =>
                {
                    b.HasOne("API.Models.AppUser", "appUser")
                        .WithMany("messages")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Models.Chat", "chat")
                        .WithMany("messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appUser");

                    b.Navigation("chat");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("API.Models.Chat", b =>
                {
                    b.Navigation("chat_AppUsers");

                    b.Navigation("messages");
                });

            modelBuilder.Entity("API.Models.AppUser", b =>
                {
                    b.Navigation("chat_AppUsers");

                    b.Navigation("messages");
                });
#pragma warning restore 612, 618
        }
    }
}
